"""Test error handling in hyperparameter optimization."""

from scxpand.hyperopt.hyperopt_optimizer import CATCHABLE_EXCEPTIONS, CRITICAL_ERRORS


def test_error_categorization():
    """Test that errors are categorized correctly for trial failure vs continuation."""
    print("üß™ Testing Error Categorization...")

    print("\nüìã Critical Errors (cause trial failure):")
    for error_type in CRITICAL_ERRORS:
        print(f"  ‚úì {error_type.__name__}")

    print("\nüìã Recoverable Errors (allow optimization to continue):")
    for error_type in CATCHABLE_EXCEPTIONS:
        print(f"  ‚úì {error_type.__name__}")

    # Verify specific error types are classified correctly
    assert MemoryError in CRITICAL_ERRORS, "MemoryError should cause trial failure"
    assert RuntimeError in CRITICAL_ERRORS, "RuntimeError should cause trial failure"
    assert ValueError in CRITICAL_ERRORS, "ValueError should cause trial failure"
    assert FileNotFoundError in CRITICAL_ERRORS, "FileNotFoundError should cause trial failure"

    assert ConnectionError in CATCHABLE_EXCEPTIONS, "ConnectionError should be recoverable"
    assert TimeoutError in CATCHABLE_EXCEPTIONS, "TimeoutError should be recoverable"
    assert ImportError in CATCHABLE_EXCEPTIONS, "ImportError should be recoverable"
    assert OSError in CATCHABLE_EXCEPTIONS, "OSError should be recoverable"

    print("\n‚úÖ Error categorization is correct!")


def test_error_handling_design():
    """Test the design principles of error handling."""
    print("\nüß™ Testing Error Handling Design...")

    # Test that critical errors are properly identified
    critical_scenarios = [
        ("MemoryError", "CUDA out of memory - batch size too large"),
        ("RuntimeError", "CUDA error during training - hardware issue"),
        ("ValueError", "Invalid parameter values - model misconfiguration"),
        ("FileNotFoundError", "Missing data or model files"),
    ]

    recoverable_scenarios = [
        ("ConnectionError", "Network timeout - temporary connectivity issue"),
        ("TimeoutError", "Request timeout - can retry"),
        ("ImportError", "Optional dependency missing - can skip feature"),
        ("OSError", "Disk space issue - temporary system problem"),
    ]

    print("\nüî• Critical Error Scenarios (Trial Fails):")
    for error_name, scenario in critical_scenarios:
        print(f"  ‚Ä¢ {error_name}: {scenario}")

    print("\nüîÑ Recoverable Error Scenarios (Continue Optimization):")
    for error_name, scenario in recoverable_scenarios:
        print(f"  ‚Ä¢ {error_name}: {scenario}")

    print("\n‚úÖ Error handling design covers key failure modes!")


def test_out_of_memory_handling():
    """Test specific handling of out-of-memory scenarios."""
    print("\nüß™ Testing Out-of-Memory Error Handling...")

    # These are the types of memory errors that should cause trial failure
    memory_error_scenarios = [
        "CUDA out of memory",
        "RuntimeError: CUDA out of memory. Tried to allocate 2.00 GiB",
        "torch.cuda.OutOfMemoryError",
        "RuntimeError: [enforce fail at alloc_cpu.cpp:39]",
    ]

    print("\nüíæ Memory Error Scenarios That Should Fail Trials:")
    for scenario in memory_error_scenarios:
        print(f"  ‚ö†Ô∏è  {scenario}")

        # These should all be caught by MemoryError or RuntimeError
        if "CUDA out of memory" in scenario or "OutOfMemoryError" in scenario:
            # Usually manifests as RuntimeError in PyTorch
            assert RuntimeError in CRITICAL_ERRORS
        elif "alloc_cpu.cpp" in scenario:
            # CPU memory allocation failures
            assert RuntimeError in CRITICAL_ERRORS

    print("\n‚úÖ Out-of-memory errors properly classified as critical!")


def main():
    """Run all error handling tests."""
    print("üî¨ ERROR HANDLING VERIFICATION")
    print("=" * 50)

    test_error_categorization()
    test_error_handling_design()
    test_out_of_memory_handling()

    print("\n" + "=" * 50)
    print("üéâ ERROR HANDLING VERIFICATION COMPLETE!")
    print("=" * 50)

    print("\nüéØ KEY FINDINGS:")
    print("‚úÖ MemoryError ‚Üí Trial failure (batch size too large)")
    print("‚úÖ RuntimeError ‚Üí Trial failure (CUDA errors, training issues)")
    print("‚úÖ ValueError ‚Üí Trial failure (invalid parameters)")
    print("‚úÖ FileNotFoundError ‚Üí Trial failure (missing files)")
    print("‚úÖ ConnectionError ‚Üí Continue optimization (network issues)")
    print("‚úÖ TimeoutError ‚Üí Continue optimization (temporary timeouts)")
    print("‚úÖ ImportError ‚Üí Continue optimization (missing optional deps)")
    print("‚úÖ OSError ‚Üí Continue optimization (system issues)")

    print("\nüõ°Ô∏è  ROBUST ERROR HANDLING CONFIRMED!")


if __name__ == "__main__":
    main()
