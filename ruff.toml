# Maximum line length allowed
line-length = 120
# Target Python version
target-version = "py313"
# Directories and files to exclude from linting
exclude = [
".bzr",
".direnv",
".eggs",
".git",
".git-rewrite",
".hg",
".ipynb_checkpoints",
".mypy_cache",
".nox",
".pants.d",
".pyenv",
".pytest_cache",
".pytype",
".ruff_cache",
".svn",
".tox",
".venv",
".vscode",
"__pypackages__",
"_build",
"buck-out",
"build",
"dist",
"node_modules",
"site-packages",
"venv"
]


[format]
# Formatting configuration
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# Docstring code formatting
docstring-code-format = true
docstring-code-line-length = 72


[lint]
# Rules to enable (by category)
select = [
"A",     # flake8-builtins - Check for Python builtins being used as variables
"ANN",   # flake8-annotations - Type annotation related rules
"ARG",   # flake8-unused-arguments - Check for unused function arguments
"ASYNC", # flake8-async - Async-related checks
"B",     # flake8-bugbear - Find likely bugs and design problems
"C4",    # flake8-comprehensions - Better list/dict/set comprehensions
"C90",   # mccabe - Complexity checker
"D",     # pydocstyle - Docstring conventions and formatting
# "DTZ",   # flake8-datetimez - Ensure datetime objects have timezones
"E",     # pycodestyle errors - PEP 8 style conventions
"EXE",   # flake8-executable - Ensure file permissions are correct
"F",     # pyflakes - Detect various errors
"FA",    # flake8-future-annotations - Checks for future annotations
"FLY",   # flynt - Convert string format to f-strings
"FURB",  # refurb - Code refactoring suggestions
"G",     # flake8-logging-format - Check logging format strings
"I",     # isort - Import sorting
"INT",   # flake8-gettext - Gettext internationalization
"INP",   # flake8-no-pep420 - Ensure __init__.py exists in packages
"ISC",   # flake8-implicit-str-concat - Check string concatenation
"LOG",   # flake8-logging - Logging-related checks
"N",     # pep8-naming - PEP 8 naming conventions
"NPY",   # NumPy-specific rules
"PD",    # pandas-vet - Pandas usage checks
"PERF",  # Perflint - Performance optimizations
"PGH",   # pygrep-hooks - Various grep-based checks
"PIE",   # flake8-pie - Misc. linting rules
"PL",    # Pylint - General Python linting rules
"PT",    # flake8-pytest-style - Pytest-specific checks
"PYI",   # flake8-pyi - Type stub file (.pyi) checks
"Q",     # flake8-quotes - Check quote style
"RET",   # flake8-return - Check return statement consistency
"RSE",   # flake8-raise - Check raise statement consistency
"RUF",   # Ruff-specific rules
"SIM",   # flake8-simplify - Code simplification suggestions
"SLOT",  # flake8-slots - Enforce __slots__ usage
"T10",   # flake8-debugger - Check for debugger imports and calls
"TC",    # flake8-type-checking - Type-checking related rules
"TID",   # flake8-tidy-imports - Import tidying
"UP",    # pyupgrade - Upgrade syntax to newer Python
"YTT"    # flake8-2020 - Check for misuse of sys.version
]
# Pattern for dummy variables (underscore prefixed)
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Rules that can be automatically fixed
fixable = [ "ALL" ]
# Rules that should not be automatically fixed
unfixable = [
    "E711",   # None comparison
    "F841",   # Local variable is assigned to but never used
    "ARG001"  # Unused function argument
]
ignore = [
# ANN - Type Annotation Rules
"ANN001",  # Missing type annotation for function argument
"ANN002",  # Missing type annotation for *args
"ANN003",  # Missing type annotation for **kwargs
"ANN201",  # Missing return type annotation for public function
"ANN202",  # Missing return type annotation for private function
"ANN204",  # Missing return type annotation for special method
"ANN401",  # Dynamically typed expressions (typing.Any) are disallowed

# B - Bugbear Rules
"B905",    # `zip()` without an explicit `strict=` parameter

# C - Complexity Rules
"C408",    # Unnecessary `dict` call (rewritten as literal)
"C901",    # Function is too complex

# E - pycodestyle Rules
"E402",    # Module level import not at top of file
"E501",    # Line too long

# G - Logging Rules
"G003",    # Logging statement uses string concatenation
"G004",    # Logging statement uses f-string

# N - Naming Rules
"N801",    # Class name should use CapWords convention
"N802",    # Function name should be lowercase
"N803",    # Argument name should be lowercase
"N806",    # Variable in function should be lowercase
"N812",    # Lowercase imported as non-lowercase
"N813",    # Camelcase imported as lowercase
"N999",    # Invalid module name

# NPY - NumPy Rules
"NPY002",  # Replace legacy `np.random.seed`

# PD - Pandas Rules
"PD901",   # Avoid using the generic variable name `df` for DataFrames

# PGH - PyGrep Hooks
"PGH003",  # Use specific rule codes when ignoring type issues

# PLR - Pylint Refactor Rules
"PLR0911", # Too many return statements
"PLR0912", # Too many branches
"PLR0913", # Too many arguments in function definition
"PLR0914", # Too many local variables
"PLR0915", # Too many statements
"PLR2004", # Magic value used in comparison

# PT - Pytest Rules
"PT009",   # Use a regular assert instead of unittest-style assertion
"PT018",   # Assertion should be broken into multiple lines for better failure messages

# Q - Quote Rules
"Q000",    # Double quotes found but single quotes preferred

# RET - Return Rules
"RET504",  # Unnecessary variable assignment before return statement
"RET505",  # Unnecessary `elif` after `return` statement

# RUF - Ruff-specific Rules
"RUF005",  # Consider using iterable unpacking instead of concatenation
"RUF012",  # Module level import not at top of file
"RUF003",  # Comment contains ambiguous characters

# SIM - Simplify Rules
"SIM108",  # Use ternary operator instead of if-else-block
"S101",    # Use of `assert` detected
"SIM117",  # Use a single `with` statement with multiple contexts instead of nested `with` statements

# TRY - Try/Except Rules
"TRY003",  # Avoid specifying long messages outside exception class
"TRY300",  # Consider moving this statement to an `else` block
"TRY301",  # Exception handler with `raise` as its first and only statement

# UP - Upgrade Rules
"UP006",   # Use `type` instead of `Type` for type annotations
"UP007",   # Use `X | Y` for type annotations instead of `Union[X, Y]`
"UP017",   # Use `datetime.UTC` instead of deprecated timezone constants
"UP035",   # Import from `typing` is deprecated

# D - Docstring Rules (pydocstyle)
"D100",    # Missing docstring in public module
"D101",    # Missing docstring in public class
"D102",    # Missing docstring in public method
"D103",    # Missing docstring in public function
"D104",    # Missing docstring in public package
"D105",    # Missing docstring in magic method
"D106",    # Missing docstring in public nested class
"D107",    # Missing docstring in __init__
"D200",    # One-line docstring should fit on one line
"D201",    # No blank lines allowed before function docstring
"D202",    # No blank lines allowed after function docstring
"D203",    # 1 blank line required before class docstring (conflicts with D211)
"D204",    # 1 blank line required after class docstring
"D205",    # 1 blank line required between summary line and description
"D206",    # Docstring should be indented with spaces, not tabs
"D207",    # Docstring is under-indented
"D208",    # Docstring is over-indented
"D209",    # Multi-line docstring closing quotes should be on a separate line
"D210",    # No whitespaces allowed surrounding docstring text
"D211",    # No blank lines allowed before class docstring (conflicts with D203)
"D212",    # Multi-line docstring summary should start at the first line (conflicts with D213)
"D213",    # Multi-line docstring summary should start at the second line (conflicts with D212)
"D214",    # Section is over-indented
"D215",    # Section underline is over-indented
"D300",    # Use """triple double quotes"""
"D301",    # Use r""" if any backslashes in a docstring
"D400",    # First line should end with a period
"D401",    # First line should be in imperative mood
"D402",    # First line should not be the function's "signature"
"D403",    # First word of the first line should be properly capitalized
"D404",    # First word of the docstring should not be "This"
"D405",    # Section name should be properly capitalized
"D406",    # Section name should end with a newline
"D407",    # Missing dashed underline after section
"D408",    # Section underline should be in the line following the section's name
"D409",    # Section underline should match the length of its name
"D410",    # Missing blank line after section
"D411",    # Missing blank line before section
"D412",    # No blank lines allowed between a section header and its content
"D413",    # Missing blank line after last section
"D414",    # Section has no content
"D415",    # First line should end with a period, question mark, or exclamation point
"D416",    # Section name should end with a colon
"D417",    # Missing argument descriptions in the docstring
"D418",    # Found docstring that should be an abstract method
"D419",    # Docstring is empty
]

# Per-file ignores
[lint.per-file-ignores]
"*.ipynb" = ["I001"]  # Ignore import sorting in Jupyter notebooks


[lint.isort]
combine-as-imports = true
lines-between-types = 1
lines-after-imports = 2


[lint.flake8-pytest-style]
fixture-parentheses = false


[lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"


[lint.mccabe]
max-complexity = 15


[lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60


[lint.pydocstyle]
# Use Google-style docstrings (compatible with Sphinx)
convention = "google"
